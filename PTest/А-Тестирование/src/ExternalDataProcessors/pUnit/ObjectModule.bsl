#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ПроверитьИстина(ПроверяемоеЗначение, ТекстВСлучаеОшибки="") Экспорт
	
	Если ПроверяемоеЗначение <> Истина тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, "Значение не является ИСТИНА");
	КонецЕсли;	
		
 КонецПроцедуры

Процедура ПроверитьЛожь(ПроверяемоеЗначение, ТекстВСлучаеОшибки="") Экспорт
	
	Если ПроверяемоеЗначение <> Ложь тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, "Значение не является ЛОЖЬ");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТипЧисло(ПроверяемоеЗначение, ТекстВСлучаеОшибки="") Экспорт
	
	Если ТипЗнч(ПроверяемоеЗначение) <> Тип("Число") тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, "Значение не является типа ЧИСЛО");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТипСтрока(ПроверяемоеЗначение, ТекстВСлучаеОшибки) Экспорт
	
	Если ТипЗнч(ПроверяемоеЗначение) <> Тип("Строка") тогда
		ВызватьИсключение ТекстВСлучаеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗначениеЗаполнено(ПроверяемоеЗначение, ТекстВСлучаеОшибки = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ПроверяемоеЗначение) тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, "Значение не заполнено");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПустоеЗначение(ПроверяемоеЗначение, ТекстВСлучаеОшибки="") Экспорт
	
	Если ЗначениеЗаполнено(ПроверяемоеЗначение) тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, "Значение не пустое");;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗначениеПростогоТипа(ПроверяемоеЗначение, ТекстВСлучаеОшибки)		
	
	ОписаниеТипа = ПолучитьОписаниеТипаПростыхТипов();
	
	Если НЕ ОписаниеТипа.СодержитТип(ТипЗнч(ПроверяемоеЗначение)) тогда
		ВызватьИсключение ТекстВСлучаеОшибки;	
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗначениеТипаКоллекция(ПроверяемоеЗначение, ТекстВСлучаеОшибки)		
	
	ОписаниеТипа = ПолучитьОписаниеТипаКоллекций();
	
	Если НЕ ОписаниеТипа.СодержитТип(ТипЗнч(ПроверяемоеЗначение)) тогда
		ВызватьИсключение ТекстВСлучаеОшибки;	
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗначенияПростогоТипаНеРавны(Значение1, Значение2, ТекстВСлучаеОшибки) Экспорт
	
	ПроверитьЗначениеПростогоТипа(Значение1, СтрШаблон("Значение не является простым типом", Значение1));
	ПроверитьЗначениеПростогоТипа(Значение2, СтрШаблон("Значение не является простым типом", Значение2));
	
	Если Значение1 = Значение2 тогда
		ВызватьИсключение ТекстВСлучаеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗначенияПростогоТипаРавны(Значение1, Значение2, ТекстВСлучаеОшибки) Экспорт
	
	ПроверитьЗначениеПростогоТипа(Значение1, СтрШаблон("Значение %1 не является простым типом", Значение1));
	ПроверитьЗначениеПростогоТипа(Значение2, СтрШаблон("Значение %1 не является простым типом", Значение2));
	
	Если Значение1 <> Значение2 тогда
		ВызватьИсключение ТекстВСлучаеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКоллекцииРавны(Значение1, Значение2, ТекстВСлучаеОшибки="") Экспорт
	
	ПроверитьЗначениеТипаКоллекция(Значение1, "Значение не является коллекцией");
	ПроверитьЗначениеТипаКоллекция(Значение2, "Значение не является коллекцией");
	
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(Значение1, Значение2) тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, "Коллекции не равны");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКоллекцииРавныПоКолонкам(Значение1, Значение2, ИменаКолонок, ТекстВСлучаеОшибки="") Экспорт
	
	ПроверитьЗначениеТипаКоллекция(Значение1, "Значение не является коллекцией");
	ПроверитьЗначениеТипаКоллекция(Значение2, "Значение не является коллекцией");
	
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(Значение1, Значение2, ИменаКолонок) тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, "Коллекции не равны");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКоллекцииРавныСУчетомСортировкиСтрок(Значение1, Значение2, ТекстВСлучаеОшибки) Экспорт
	
	Если ОбщегоНазначения.КоллекцииИдентичны(Значение1, Значение2, , ,Истина) тогда
		ВызватьИсключение ТекстВСлучаеОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СравнитьЗначенияРеквизитовОбъектаПоСтруктуре(ЗначениеОбъект, ЗначениеСтруктура, ТекстВСлучаеОшибки) Экспорт
	
	ПроверитьЭтоОбъектСсылочногоТипа(ЗначениеОбъект);
	ПроверитьЗначениеТипаСтруктура(ЗначениеСтруктура);
	
	ПроверитьОбъектыРавны(ЗначениеОбъект, ЗначениеСтруктура, ТекстВСлучаеОшибки);
	
КонецПроцедуры

Процедура ПроверитьОбъектыРавны(Объект1, Объект2, ТекстВСлучаеОшибки) Экспорт
		
	СравнитьРеквизитыОбъектов(Объект1, Объект2);
	
КонецПроцедуры

Процедура ПроверитьЭтоОбъектСсылочногоТипа(Значение)
	
	Если Не ЭтоОбъектСсылочногоТипа(Значение) тогда				
		ВызватьИсключение СтрШаблон("Значение %1 не является объектом ссылочного типа", Значение);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗначениеТипаСтруктура(Значение, ТекстВСлучаеОшибки="")
	
	Если Не ЭтоСтруктура(Значение) тогда				
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, "Значение не является типа СТРУКТУРА");
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗначенияРавны(Значение1, Значение2, ТекстВСлучаеОшибки="") Экспорт
		
	Если Значение1 <> Значение2 тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, СтрШаблон("Значения ""%1"" и ""%2"" не равны", Значение1, Значение2));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗначенияНеРавны(Значение1, Значение2, ТекстВСлучаеОшибки="") Экспорт
		
	Если Значение1 = Значение2 тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, СтрШаблон("Значения ""%1"" и ""%2"" равны", Значение1, Значение2));
	КонецЕсли;
	
КонецПроцедуры

#Область Регистры

Процедура ПроверитьЕстьСсылкаВРегистре(ИмяРегистра, ИмяПоляРегистра, ЗначениеПроверки, ТекстВСлучаеОшибки="") Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначениеПроверки", ЗначениеПроверки);
	Запрос.Текст = 
	"ВЫБРАТЬ Т.%Поле% КАК Ссылка ИЗ %ИмяРегистра% КАК Т ГДЕ Т.%Поле% = &ЗначениеПроверки";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Поле%", ИмяПоляРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРегистра%", ИмяРегистра);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, "Объект не обнаружен в регистре");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЕстьЗаписьВРегистреПоОтбору(ИмяРегистра, Отбор, ТекстВСлучаеОшибки="") Экспорт

	Выборка = ПолучитьДанныеТаблицыПоОтбору(ИмяРегистра, Отбор);
	
	Если Выборка.Количество() = 0 тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, "Запись по отбору не обнаружена в регистре");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНетЗаписиВРегистреПоОтбору(ИмяРегистра, Отбор, ТекстВСлучаеОшибки="") Экспорт
	
	Выборка = ПолучитьДанныеТаблицыПоОтбору(ИмяРегистра, Отбор);

	Если Выборка.Количество() <> 0 тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, "Записи по отбору не должно быть в регистре");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СсылочныеОбъекты

Процедура ПроверитьЕстьСсылкаПоОтбору(ИмяТаблицы, Отбор, ТекстВСлучаеОшибки="") Экспорт

	Выборка = ПолучитьДанныеТаблицыПоОтбору(ИмяТаблицы, Отбор);
	
	Если Выборка.Количество() = 0 тогда
		ВызватьИсключение ПолучитьТекстДляОшибки(ТекстВСлучаеОшибки, СтрШаблон("Запись по отбору не обнаружена в таблице %1", ИмяТаблицы));
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти 

#Область РаботаСКоллекциями

Процедура СравнитьРеквизитыОбъектов(Объект1, Объект2)
	
	Если ЭтоСтруктура(Объект1) тогда
		Реквизиты = ПолучитьДеревоРеквизитов(Объект1);
	Иначе
		Реквизиты = ПолучитьДеревоРеквизитов(Объект2);
	КонецЕсли;	
	
	МассивОшибок = СравнитьРеквизитыОбъектовПодеревуРеквизитов(Объект1, Объект2, Реквизиты);
	
	Если МассивОшибок.Количество() тогда
		МассивОшибок.Вставить(0, "Объекты различны по реквизитам:");
		ВызватьИсключение СтрСоединить(МассивОшибок, Символы.ПС); 
	КонецЕсли;	
	
КонецПроцедуры	

Функция СравнитьРеквизитыОбъектовПодеревуРеквизитов(Объект1, Объект2, Реквизиты)
	
	МассивОшибок = Новый Массив;
	
	Для Каждого Реквизит Из Реквизиты.Строки цикл
		
		Если Реквизит.ЭтоТабличнаяЧасть тогда
			
			Попытка			
				ПреобразоватьТабличныеЧастиВКоллекцииИСравнить(Объект1, Объект2, Реквизит);				
			Исключение
			    МассивОшибок.Добавить(СтрШаблон("Табличная часть: %1", Реквизит.Имя));
			КонецПопытки; 
			
		Иначе
			
			Попытка
				Если Объект1[Реквизит.Имя] <> Объект2[Реквизит.Имя] тогда
					МассивОшибок.Добавить(Реквизит.Имя);	
				КонецЕсли;	
			Исключение
				МассивОшибок.Добавить(Реквизит.Имя);
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат МассивОшибок;
	
КонецФункции

Процедура ПреобразоватьТабличныеЧастиВКоллекцииИСравнить(Объект1, Объект2, Реквизит)
	
	Если ЭтоОбъектСсылочногоТипа(Объект1) тогда
		Коллекция1 = Объект1[Реквизит.Имя].Выгрузить();
	Иначе
		Коллекция1 = Объект1[Реквизит.Имя];
	КонецЕсли;
	
	Если ЭтоОбъектСсылочногоТипа(Объект2) тогда
		Коллекция2 = Объект2[Реквизит.Имя].Выгрузить();
	Иначе
		Коллекция2 = Объект2[Реквизит.Имя];
	КонецЕсли;
	
	МассивИменКолонок = Реквизит.Строки.ВыгрузитьКолонку("Имя");
	ИменаКолонок = СтрСоединить(МассивИменКолонок,",");
	
	ПроверитьКоллекцииРавныПоКолонкам(Коллекция1, Коллекция2, ИменаКолонок)

КонецПроцедуры	

Функция ПолучитьДеревоРеквизитов(Объект)

	ДеревоРеквизитов = Новый ДеревоЗначений;
	
	Если ТипЗнч(Объект) = Тип("Структура") тогда
		ДеревоРеквизитов = ПолучитьДеревоРеквизитовПоСтруктуре(Объект);	
	Иначе
		ДеревоРеквизитов = ПолучитьДеревоРеквизитовИзОбъектаМетаданных(Объект);
	КонецЕсли;	
	
	Возврат ДеревоРеквизитов;

КонецФункции

Функция ПолучитьДеревоРеквизитовПоСтруктуре(Объект)
	
	ДеревоРеквизитов = ДеревоРеквизитовИнициализировать();
	
	Для Каждого Эл Из Объект Цикл 
		
		СтрокаДерева = ДеревоРеквизитов.Строки.Добавить();
		СтрокаДерева.Имя = Эл.Ключ;
		СтрокаДерева.Синоним = Эл.Ключ;
		СтрокаДерева.Тип = ТипЗнч(Эл.Значение);
		
		Если СтрокаДерева.Тип = Тип("ТаблицаЗначений") тогда
			
			СтрокаДерева.ЭтоТабличнаяЧасть = Истина;
			
			КолонкиТаблицы = Эл.Значение.Колонки;
			
			Для Каждого Колонка Из КолонкиТаблицы цикл
				
				СтрокаДереваРеквизитТЧ = СтрокаДерева.Строки.Добавить();
				СтрокаДереваРеквизитТЧ.Имя = Колонка.Имя;
				СтрокаДереваРеквизитТЧ.Синоним = Колонка.Заголовок;
				СтрокаДерева.Тип = Колонка.ТипЗначения
				
			КонецЦикла;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат ДеревоРеквизитов;
	
КонецФункции

Функция ПолучитьДеревоРеквизитовИзОбъектаМетаданных(Объект) 
	
	ДеревоРеквизитов = ДеревоРеквизитовИнициализировать();
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл 
		
		СтрокаДерева = ДеревоРеквизитов.Строки.Добавить();
		СтрокаДерева.Имя = Реквизит.Имя;
		СтрокаДерева.Синоним = Реквизит.Синоним;
		СтрокаДерева.Тип = Реквизит.Тип;
		
	КонецЦикла;	
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл 
		
		СтрокаДерева = ДеревоРеквизитов.Строки.Добавить();
		СтрокаДерева.Имя = ТабличнаяЧасть.Имя;
		СтрокаДерева.Синоним = ТабличнаяЧасть.Синоним;
		СтрокаДерева.ЭтоТабличнаяЧасть = Истина;
		
		Для Каждого Колонка Из ТабличнаяЧасть.Реквизиты цикл
			
			СтрокаДереваРеквизитТЧ = СтрокаДерева.Строки.Добавить();
			СтрокаДереваРеквизитТЧ.Имя = Колонка.Имя;
			СтрокаДереваРеквизитТЧ.Синоним = Колонка.Синоним;
			СтрокаДерева.Тип = Колонка.Тип
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоРеквизитов;
	
КонецФункции

Функция ДеревоРеквизитовИнициализировать()
			
	ДеревоРеквизитов = Новый ДеревоЗначений;
	ДеревоРеквизитов.Колонки.Добавить("Имя");
	ДеревоРеквизитов.Колонки.Добавить("Синоним");
	ДеревоРеквизитов.Колонки.Добавить("Тип");
	ДеревоРеквизитов.Колонки.Добавить("ЭтоТабличнаяЧасть", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоРеквизитов;

КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедуры

Функция ПолучитьДанныеТаблицыПоОтбору(ИмяТаблицы, Отбор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ %ИмяТаблицы% КАК Т";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицы%", ИмяТаблицы);
	
	Результат = Запрос.Выполнить();
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Результат);
	
	Для Каждого ЭлОтбора Из Отбор цикл
		СтрокаОтбора = ПостроительЗапроса.Отбор.Добавить(ЭлОтбора.Ключ);
		СтрокаОтбора.Установить(ЭлОтбора.Значение, Истина);
	КонецЦикла;
	
	ПостроительЗапроса.Выполнить();
	
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Возврат Выборка;

КонецФункции

Функция ПолучитьОписаниеТипаПростыхТипов()		
	
	МассивПростыхТипов = Новый Массив;
	МассивПростыхТипов.Добавить(Тип("Число"));
	МассивПростыхТипов.Добавить(Тип("Строка"));
	МассивПростыхТипов.Добавить(Тип("Дата"));
	МассивПростыхТипов.Добавить(Тип("Булево"));	
	
	ОписаниеТипа = Новый ОписаниеТипов(МассивПростыхТипов);
	Возврат ОписаниеТипа;

КонецФункции

Функция ПолучитьОписаниеТипаКоллекций()		
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ТаблицаЗначений"));
	МассивТипов.Добавить(Тип("ДеревоЗначений"));	
	МассивТипов.Добавить(Тип("СписокЗначений"));	
	МассивТипов.Добавить(Тип("Соответствие"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("ФиксированныйМассив"));
	МассивТипов.Добавить(Тип("Структура"));
	
	ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
	Возврат ОписаниеТипа;

КонецФункции

Функция ПолучитьТекстДляОшибки(ТекстОшибки, ТекстОшибкиПоУмолчанию)
	
	Возврат ?(ПустаяСтрока(ТекстОшибки), ТекстОшибкиПоУмолчанию, ТекстОшибки); 
	
КонецФункции

Функция ЭтоОбъектИлиСтруктура(Значение)
	
	Если ЭтоСтруктура(Значение) тогда
		Возврат Истина;
	ИначеЕсли ЭтоОбъектСсылочногоТипа(Значение) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоСтруктура(Знач Значение)
	
	Возврат ТипЗнч(Значение) = Тип("Структура");

КонецФункции

Функция ЭтоОбъектСсылочногоТипа(Знач Значение)
	
	Попытка
		Возврат ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(Значение.Метаданные());
	Исключение
	КонецПопытки;

	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецЕсли
