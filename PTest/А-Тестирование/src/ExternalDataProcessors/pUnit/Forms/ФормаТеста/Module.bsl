
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьДеревоТестов();

КонецПроцедуры

#Область ЗаполнениеДереваТестов

&НаСервере
Процедура ЗаполнитьДеревоТестов()
		
	Дерево = РеквизитФормыВЗначение("ДеревоТестов");
	
	#Область АТестирование
	
	СтрокаРазделИнтеграция = ДобавитьРазделТестаВДерево(Дерево, "А-Тестирование");	
	
	СтрокаРаздел = ДобавитьРазделТестаВДерево(СтрокаРазделИнтеграция, "Получение курса на дату");
	ДобавитьТестВДерево(Строкараздел, "Тест: получен курс на нужную дату", "ТестПолучениеКурсаВалюты_СозданиеПакетаДокументов");
	
	#КонецОбласти 
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоТестов");

КонецПроцедуры

&НаСервере
Функция ДобавитьТестВДерево(Строкараздел, ИмяТеста, ИмяФункцииТеста)
		
	СтрокаТеста = Строкараздел.Строки.Добавить();
	СтрокаТеста.ИмяТеста = ИмяТеста;
	СтрокаТеста.ИмяФункцииТеста = СтрШаблон("%1%2", ИмяФункцииТеста, "()");
	СтрокаТеста.Вкл = Истина;
	
	Возврат СтрокаТеста;

КонецФункции

&НаСервере
Функция ДобавитьРазделТестаВДерево(Дерево, ИмяРаздела)
	
	НоваяСтрока = Дерево.Строки.Добавить();
	НоваяСтрока.ИмяТеста = ИмяРаздела;
	НоваяСтрока.Вкл = Истина;
	
	Возврат НоваяСтрока;
	
КонецФункции

#КонецОбласти 

#Область Служебные

&НаКлиенте
Процедура ВыполнитьТестыИзДерева()
	
	//Дерево = РеквизитФормыВЗначение("ДеревоТестов");
	ВыполненныеОперации = Новый Соответствие;
	ВыполнитьТестыИзДереваРекурсивно(ДеревоТестов.ПолучитьЭлементы(), ВыполненныеОперации);
	ЗаполнитьДеревоПоОперациямНаСервере(ВыполненныеОперации);
	//ЗначениеВРеквизитФормы(Дерево, "ДеревоТестов");
		
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьТестыИзДереваРекурсивно(Дерево, ВыполненныеОперации)
		
	Для Каждого СтрокаДерева Из Дерево цикл
		
		Если Не СтрокаДерева.Вкл тогда
			Продолжить;
		КонецЕсли;
		
		Ид = СтрокаДерева.ПолучитьИдентификатор();
		ВыполненныеОперации[Ид] = ВыполненныеОперацииПоля();	
		
		Если ЗначениеЗаполнено(СтрокаДерева.ИмяФункцииТеста) тогда
			Попытка
			
				Выполнить(СтрокаДерева.ИмяФункцииТеста);				
			     ВыполненныеОперации[Ид].Пройден = НомерКартинкиПройден();
			Исключение
			   ВыполненныеОперации[Ид].ТекстОшибки = ОписаниеОшибки();
			   ВыполненныеОперации[Ид].Пройден = НомерКартинкиОшибка();
			КонецПопытки;
		Иначе  
			ВыполнитьТестыИзДереваРекурсивно(СтрокаДерева.ПолучитьЭлементы(), ВыполненныеОперации)
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ВыполненныеОперацииПоля()
	
	Возврат Новый Структура("Пройден, ТекстОшибки",0,"");
	
КонецФункции

Процедура ЗаполнитьДеревоПоОперациямНаСервере(ВыполненныеОперации)
	
	Для Каждого Операция Из ВыполненныеОперации цикл
		СтрокаДерева = ДеревоТестов.НайтиПоИдентификатору(Операция.Ключ);
		ЗаполнитьЗначенияСвойств(СтрокаДерева, Операция.Значение);
	КонецЦикла;	
	
КонецПроцедуры	

Функция Утверждения()
	
	Утверждения = РеквизитФормыВЗначение("Объект");
	
	Возврат Утверждения;
	
КонецФункции

#КонецОбласти 

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура Тест(Команда)
	
	ВыполнитьТестыИзДерева();
	
	//СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтаФорма, "ДеревоТестов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	
	УстановитьСнятьПометкуНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуВсе(Команда)
	
	УстановитьСнятьПометкуНаСервере(Ложь);
	
КонецПроцедуры

Процедура УстановитьСнятьПометкуНаСервере(Вкл)
	
	СтрокиИдДереваСоответствие = Новый Соответствие;
	ПолучитьСтрокиДереваРекурсивно(ДеревоТестов.ПолучитьЭлементы(), СтрокиИдДереваСоответствие);
		
	УстановитьСнятьПометку(Вкл, СтрокиИдДереваСоответствие);
	
КонецПроцедуры

Процедура УстановитьСнятьПометку(Вкл, СтрокиИдДереваСоответствие)
		
	Для Каждого СтрокаИд Из СтрокиИдДереваСоответствие цикл
		
		СтрокаДерева = ДеревоТестов.НайтиПоИдентификатору(СтрокаИд.Ключ);
		
		СтрокаДерева.Вкл = Вкл;
		
	КонецЦикла;

КонецПроцедуры	

&НаКлиенте
Процедура ДеревоТестовВклПриИзменении(Элемент)
	
		УстановитьСнятьПометкуДляРодителей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПометкуДляРодителей()
	
	ТекущаяСтрока = ДеревоТестов.НайтиПоИдентификатору(Элементы.ДеревоТестов.ТекущаяСтрока);
	
	УстановитьСнятьПометкуДляРодителейСтрокиРекурсивно(ТекущаяСтрока, ТекущаяСтрока.Вкл);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПометкуДляРодителейСтрокиРекурсивно(СтрокаДерева, Вкл)
	
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Если Родитель <> Неопределено тогда
		Если Вкл = Ложь тогда
			Если МожноВыключитьРодителя(Родитель) тогда
				Родитель.Вкл = Вкл;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Родитель.Вкл = Вкл
		КонецЕсли;
		
		УстановитьСнятьПометкуДляРодителейСтрокиРекурсивно(Родитель, Вкл);
		
	КонецЕсли;	
		
КонецПроцедуры
  
Функция МожноВыключитьРодителя(Родитель)
	
	СтрокиДерева = Родитель.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиДерева цикл
		Если СтрокаДерева.Вкл тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

Процедура ПолучитьСтрокиДереваРекурсивно(Дерево, СтрокиИдДереваСоответствие)
		
	Для Каждого СтрокаДерева Из Дерево цикл
				
		Ид = СтрокаДерева.ПолучитьИдентификатор();
		СтрокиИдДереваСоответствие[Ид] = Истина;	
		
		ПолучитьСтрокиДереваРекурсивно(СтрокаДерева.ПолучитьЭлементы(), СтрокиИдДереваСоответствие)
				
	КонецЦикла;	
	
КонецПроцедуры

Функция НомерКартинкиПройден()
	
	Возврат 5;

КонецФункции

Функция НомерКартинкиОшибка()
	
	Возврат 6;

КонецФункции	

#КонецОбласти 

#Область ПрикладныеТесты

#Область АТестирование

Процедура ТестПолучениеКурсаВалюты_СозданиеПакетаДокументов()
	
	НачатьТранзакцию();
	// Arrange
	НаДату = '20201110';
	Валюта = Справочники.Валюты.НайтиПоКоду(978);
	Курс = 100;
	РС = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи();
	РС.Период = НаДату;	
	РС.Валюта = Валюта;
	РС.Кратность = 1;
	РС.Курс = Курс;
	РС.Записать();
	
	// Act
	СтруктураЦены = Обработки.Расш1_СозданиеПакетаДокументов.ПолучитьЦену(НаДату);
	
	// Assert 
	Утверждения().ПроверитьЗначенияРавны(СтруктураЦены.Период, НаДату, "Курс взят не на ту дату");
	Утверждения().ПроверитьЗначенияРавны(СтруктураЦены.Курс, Курс, "Значение курса неверное");
	Утверждения().ПроверитьЗначенияРавны(СтруктураЦены.Валюта, Валюта, "Курс взят не той валюты");
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 



